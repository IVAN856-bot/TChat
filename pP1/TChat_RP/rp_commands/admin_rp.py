from aiogram.types import Message
from Directory.database.data import DataBase
from aiogram import Router
from aiogram.filters import Command, CommandObject
import logging
from Directory.config import admin_id


router = Router(name=__name__)
logging.basicConfig(level=logging.INFO)

quote_buffer = {}
DB = DataBase()


@router.message(Command('edit'))  # /edit bal1 + 100
async def bal_1(message: Message, command: CommandObject):
    user_id = message.from_user.id

    if user_id not in admin_id:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞
        return

    if not command.args:
        await message.reply("–í–≤–æ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
        return
    data = command.args.split()

    if data[0] == 'bal1' and len(data) == 3:  # /edit1(2) bal [+/-/=] [–∫–æ–ª-–≤–æ –≤–∞–ª—é—Ç—ã]
        reply = message.reply_to_message
        if not reply:
            return await message.reply("–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        else:
            reply_user_id = reply.from_user.id
            DB.reg_user(reply_user_id)
        try:
            money = int(data[2])
            user2 = reply.from_user.first_name
            profile2_link = f"tg://user?id={reply.from_user.id}"
            profile2 = f"<a href='{profile2_link}'>{user2}</a>"
        except ValueError:
            await message.reply(
                "–í—ã –≤–≤–µ–ª–∏ –∫–æ–º–∞–Ω–¥—É –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã: /edit1(2) bal [+/-/=] [–∫–æ–ª-–≤–æ –≤–∞–ª—é—Ç—ã]")
            return

        balance1 = DB.get_data(user_id, "balance1")
        match data[1]:
            case "+":
                DB.edit_data_set(reply_user_id, "balance1", balance1 + money)
                await message.reply(f"–°—É–º–º–∞ üß∂{money} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫ –±–∞–ª–∞–Ω—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {profile2}.")
            case "-":
                DB.edit_data_set(reply_user_id, "balance1", balance1 - money)
                await message.reply(f"–°—É–º–º–∞ üß∂{money} –≤—ã–ø–∏—Å–∞–Ω–∞ –∏–∑ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {profile2}.")
            case "=":
                DB.edit_data_set(reply_user_id, "balance1", money)
                await message.reply(f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {profile2} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ —Å—É–º–º—É üß∂{money}.")
            case _:
                return await message.reply(
                    "–í—ã –≤–≤–µ–ª–∏ –∫–æ–º–∞–Ω–¥—É –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã: /edit1(2) bal [+/-/=] [–∫–æ–ª-–≤–æ –≤–∞–ª—é—Ç—ã]")
    elif data[0] == 'bal2' and len(data) == 3:  # /edit1(2) bal [+/-/=] [–∫–æ–ª-–≤–æ –≤–∞–ª—é—Ç—ã]
        reply = message.reply_to_message
        if not reply:
            return await message.reply("–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        else:
            reply_user_id = reply.from_user.id
            DB.reg_user(reply_user_id)
        try:
            money = int(data[2])
            user2 = reply.from_user.first_name
            profile2_link = f"tg://user?id={reply.from_user.id}"
            profile2 = f"<a href='{profile2_link}'>{user2}</a>"
        except ValueError:
            await message.reply(
                "–í—ã –≤–≤–µ–ª–∏ –∫–æ–º–∞–Ω–¥—É –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã: /edit1(2) bal [+/-/=] [–∫–æ–ª-–≤–æ –≤–∞–ª—é—Ç—ã]")
            return

        balance2 = DB.get_data(reply_user_id, "balance2")
        match data[1]:
            case "+":
                DB.edit_data_set(reply_user_id, "balance2", balance2+money)
                await message.reply(f"–°—É–º–º–∞ üßµ{money} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫ –±–∞–ª–∞–Ω—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {profile2}.")
            case "-":
                DB.edit_data_set(reply_user_id, "balance2", balance2-money)
                await message.reply(f"–°—É–º–º–∞ üßµ{money} –≤—ã–ø–∏—Å–∞–Ω–∞ –∏–∑ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: {profile2}.")
            case "=":
                DB.edit_data_set(reply_user_id, "balance2", money)
                await message.reply(f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {profile2} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ —Å—É–º–º—É üßµ{money}.")
            case _:
                return await message.reply(
                    "–í—ã –≤–≤–µ–ª–∏ –∫–æ–º–∞–Ω–¥—É –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã: /edit1(2) bal [+/-/=] [–∫–æ–ª-–≤–æ –≤–∞–ª—é—Ç—ã]")


@router.message(Command('photo_id'))
async def handle_photo(message: Message):
    if message.photo:
        photo_id = message.photo[-1].file_id  # –ü–æ–ª—É—á–∞–µ–º id –ø–æ—Å–ª–µ–¥–Ω–µ–π (—Å–∞–º–æ–π –±–æ–ª—å—à–æ–π) –≤–µ—Ä—Å–∏–∏ —Ñ–æ—Ç–æ
        await message.reply(f"<blockquote>ID –≤–∞—à–µ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:</blockquote> "
                            f"{photo_id}")
    else:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.")
